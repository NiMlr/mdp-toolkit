From: Alberto Escalante <alberto.nicolas.escalante@gmail.com>
Subject: FIX: made code and documentation consistent regarding the parameter k in invert_exp_funcs2

Index: mdp-toolkit/mdp/nodes/expansion_nodes.py
===================================================================
--- mdp-toolkit.orig/mdp/nodes/expansion_nodes.py
+++ mdp-toolkit/mdp/nodes/expansion_nodes.py
@@ -343,7 +343,7 @@ class GeneralExpansionNode(_ExpansionNod
                                                     self.input_dim,
                                                     self.funcs,
                                                     use_hint=use_hint,
-                                                    k=0.001)
+                                                    k=0.000001)
             return app_x_2.astype(self.dtype)
         except NotImplementedError, exc:
             raise mdp.MDPException(exc)
Index: mdp-toolkit/mdp/utils/routines.py
===================================================================
--- mdp-toolkit.orig/mdp/utils/routines.py
+++ mdp-toolkit/mdp/utils/routines.py
@@ -422,19 +422,19 @@ def gabor(size, alpha, phi, freq, sgm, x
 
 def residuals(app_x, y_noisy, exp_funcs, x_orig, k=0.0):
     """Function used internally by invert_exp_funcs2 to approximate
-    inverses in ConstantExpansionNode. """
-    app_x = app_x.reshape((1,len(app_x)))
+    inverses in GeneralExpansionNode. """
+    app_x = app_x.reshape((1,-1))
     app_exp_x =  numx.concatenate([func(app_x) for func in exp_funcs],axis=1)
 
     div_y = numx.sqrt(len(y_noisy))
-    div_x = numx.sqrt(len(x_orig))
-    return numx.append( (1-k)*(y_noisy-app_exp_x[0]) / div_y, k * (x_orig - app_x[0])/div_x )
+    div_x = numx.sqrt(len(x_orig))  
+    return numx.append( (1-k)**0.5 *(y_noisy-app_exp_x[0]) / div_y, (k)**0.5 * (x_orig - app_x[0])/div_x )
 
 def invert_exp_funcs2(exp_x_noisy, dim_x, exp_funcs, use_hint=False, k=0.0):
     """Approximates a preimage app_x of exp_x_noisy.
 
-    Returns an array app_x, such that each row of exp_x_noisy is close
-    to each row of exp_funcs(app_x).
+    Returns an array app_x, such that each row of exp_funcs(app_x) is close
+    to each row of exp_x_noisy.
 
     use_hint: determines the starting point for the approximation of the
     preimage. There are three possibilities.
@@ -445,8 +445,8 @@ def invert_exp_funcs2(exp_x_noisy, dim_x
     k: weighting factor in [0, 1] to balance between approximation error and
        closeness to the starting point. For instance:
        objective function is to minimize:
-           (1-k) * |exp_funcs(app_x) - exp_x_noisy|/output_dim +
-               k * |app_x - starting point|/input_dim
+           (1-k) * ||exp_funcs(app_x) - exp_x_noisy||**2/output_dim +
+               k * ||app_x - starting point||**2/input_dim
 
     Note: this function requires scipy.
     """
